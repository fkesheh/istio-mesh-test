apiVersion: v1
kind: ConfigMap
metadata:
  name: mock-service-script
  namespace: istio-test
data:
  server.py: |
    #!/usr/bin/env python3
    """
    Simple HTTP server to return mock responses
    """
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import json

    class MockHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            mock_response = {
                "intercepted": True,
                "message": "This response was intercepted by the mock service!",
                "path": self.path,
                "method": "GET",
                "headers": dict(self.headers),
                "mock_service": "active"
            }

            response_body = json.dumps(mock_response, indent=2)

            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Content-Length', str(len(response_body)))
            self.end_headers()
            self.wfile.write(response_body.encode())

        def log_message(self, format, *args):
            print(f"{self.client_address[0]} - - [{self.log_date_time_string()}] {format%args}")

    if __name__ == '__main__':
        server = HTTPServer(('0.0.0.0', 8080), MockHandler)
        print("Mock service running on port 8080...")
        server.serve_forever()
